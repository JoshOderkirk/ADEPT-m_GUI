function hBuildMenu = openBuildMenu(devObj)
% opens build menu using class' current properties
% If newCheck == 0, user is editing a preexisting device and object
% parameters are not empty/ don't need to set defaults
% If newCheck == 1, user is creating a new device and therefore the
% defaults need to be set.

global CONST
CONST = A_const;

% create and then hide the UI as it is being constructed ------
hBuildMenu = figure('Visible', 'off', ...
    'Position', [20, 150, 570, 365], ...
    'Name', 'Build Menu', ...
    'NumberTitle', 'off', ...
    'MenuBar', 'none', ...
    'Units', 'normalized', ...
    'ToolBar', 'none');
% construct build menu components ----------------------------

hBuildTitleText = uicontrol(hBuildMenu, ...
    'Style', 'text', ...
    'String', 'ADEPT-m: Build Device', ...
    'Position', [15, 310, 350, 40], ...
    'Units', 'normalized', ...
    'FontSize', 24);


hDevNameText = uicontrol(hBuildMenu, ...
    'Style', 'text', ...
    'String', ['Device File:  ' devObj.input_file], ...
    'Position', [15, 100, 355, 20], ...
    'FontSize', 12, ...
    'Units', 'normalized', ...
    'HorizontalAlignment', 'left');

hTypeText = uicontrol(hBuildMenu, ...
    'Style', 'text', ...
    'String', 'Device Type:', ...
    'Position', [15, 240, 100, 20], ...
    'FontSize', 12, ...
    'Units', 'normalized', ...
    'HorizontalAlignment', 'left');

hDescText = uicontrol(hBuildMenu, ...
    'Style', 'text', ...
    'String', 'Description:', ...
    'Position', [15, 205, 90, 20], ...
    'FontSize', 12, ...
    'Units', 'normalized', ...
    'HorizontalAlignment', 'left');

hTempText = uicontrol(hBuildMenu, ...
    'Style', 'text', ...
    'String', [devObj.device(1).ip(1).full_name ':'], ...
    'Position', [15, 135, 175, 20], ...
    'FontSize', 12, ...
    'Units', 'normalized', ...
    'HorizontalAlignment', 'left');

hDevStructText = uicontrol(hBuildMenu, ...
    'Style', 'text', ...
    'String', 'Device Structure', ...
    'Position', [405, 280, 150, 20], ...
    'FontSize', 12, ...
    'Units', 'normalized');

hDevBulkButton = uicontrol(hBuildMenu, ...
    'Style', 'pushbutton', ...
    'String', 'Device Bulk', ...
    'Position', [405, 125, 150, 100], ...
    'Callback', @DevBulkPress, ...
    'Units', 'normalized', ...
    'FontSize', 12);

hTopDevButton = uicontrol(hBuildMenu, ...
    'Style', 'pushbutton', ...
    'String', 'Top of Device', ...
    'Position', [405, 220, 150, 25], ...
    'Callback', @TopDevPress, ...
    'FontSize', 12, ...
    'Units', 'normalized', ...
    'TooltipString', 'This is a test');

hBottomDevButton = uicontrol(hBuildMenu, ...
    'Style', 'pushbutton', ...
    'String', 'Bottom of Device', ...
    'FontSize', 12, ...
    'Position', [405, 105, 150, 25], ...
    'Units', 'normalized', ...
    'Callback', @BottomDevPress);

hAdvancedButton = uicontrol(hBuildMenu, ...
    'Style', 'pushbutton', ...
    'String', 'Advanced', ...
    'Position', [15, 15, 125, 40], ...
    'Callback', @AdvancedPress, ...
    'Units', 'normalized', ...
    'FontSize', 16);

hSaveButton = uicontrol(hBuildMenu, ...
    'Style', 'pushbutton', ...
    'String', 'Save', ...
    'Position', [480, 15, 75, 40], ...
    'Callback', @SavePress, ...
    'Units', 'normalized', ...
    'FontSize', 16);

hTypeDropdown = uicontrol(hBuildMenu, ...
    'Style', 'popupmenu', ...
    'String', {'Solar Cell', 'Diode', 'Generic'}, ...
    'Position', [130, 240, 100, 20], ...
    'Value', getSetStrVal(devObj.device(1).ip(2), {'Solar Cell', 'Diode', 'Generic'}), ...
    'Units', 'normalized', ...
    'Callback', @UpdateTypeSelected);

hTempUnitDropdown = uicontrol(hBuildMenu, ...
    'Style', 'popupmenu', ...
    'String', devObj.device(1).ip(1).units, ...
    'Position', [270, 135, 35, 20], ...
    'Value', getNameVal(devObj.device(1).ip(1)), ...
    'Units', 'normalized', ...
    'Callback', @UpdateTemp);

hDescField = uicontrol(hBuildMenu, ...
    'Style', 'edit', ...
    'String', devObj.title, ...
    'Position', [15, 170, 350, 20], ...
    'Callback', @UpdateDesc, ...
    'Units', 'normalized', ...
    'HorizontalAlignment', 'left');

hTempField = uicontrol(hBuildMenu, ...
    'Style', 'edit', ...
    'String', getSetNumVal(devObj.device(1).ip(1)), ...
    'Position', [205, 135, 50, 20], ...
    'Callback', @UpdateTemp, ...
    'Units', 'normalized', ...
    'HorizontalAlignment', 'left');

% DevNameText = uicontrol(hBuildMenu, ...
%     'Style', 'text', ...
%     'String', 'Enter device name', ...
%     'Position', [15, 100, 150, 20], ...
%     'FontSize', 12, ...
%     'Units', 'normalized', ...
%     'HorizontalAlignment', 'left');

% DevNameBox = uicontrol(hBuildMenu, ...
%     'Style', 'edit', ...
%     'String', 'Enter name here', ...
%     'Position', [15, 70, 180, 20], ...
%     'Callback', @UpdateName, ...
%     'Units', 'normalized', ...
%     'HorizontalAlignment', 'left');

% Initialize the UI. ------------------------------------------
% make UI visible
hBuildMenu.Visible = 'on';

% Build Menu Callbacks ----------------------------------------

    function TopDevPress(hObject, callbackdata)
        % Brings up new menu for selecting properties for the top
        % of device
        
    end

    function DevBulkPress(~, ~)
        % Brings up new menu for selecting properties for the bulk
        % of the device

        hLayerMenu = openLayerMenu(devObj);
        
    end

    function BottomDevPress(hObject, callbackdata)
        % Brings up new menu for selecting properties for the
        % bottom of device
        
    end

    function AdvancedPress(hObject, callbackdata)
        % Brings up new menu for selecting advanced properties for
        % the device
        
    end

    function SavePress(~, ~)
        % If user didn't touch defaults then make sure they are assigned to
        % adept object. Note: the 1 can be anything it just needs a second 
        % input arg
        UpdateTypeSelected(hTypeDropdown, 1);
        UpdateDesc(hDescField, 1);
        UpdateTemp(hTempField, 1);
        
        % Brings up new menu for saving the device properties
        disp(['Device Type Selected: ' devObj.type]);
        temp = sprintf('%.2f', devObj.T);
        disp(['Temp of Device: ' temp]);
        disp(['Desc of Device: ' devObj.description]);
        
        global data_list 
        data_list = strings([10,10]);%initiate a data list string that gather the data
        data_list(1) = devObj.type;%save type of the device into the first data
        data_list(2) = devObj.T;%save the temperature into the data_list 2
        data_list(3) = devObj.description;%save the description into the data_list 3
        save('Myfunction.mat','data_list');%save the data into myfunction mat
        x = devObj.input_file;

        movefile('/GUI_Devices/Myfunction.mat', [x '.GUI']);%rename the current file 
        
        questdlg('Save Complete!', 'Save Complete', 'OK', 'OK');
    end

    function UpdateTypeSelected(hObject, ~)
        % Sets type of device to selected
        typeVal = hObject.Value;
        typeStr = hObject.String;
        devObj.device(1).ip(2).set = typeStr{typeVal};
    end

    function UpdateDesc(hObject, ~)
        % Sets desc to new user entered string
        devObj.title = hObject.String;
    end

    %function UpdateName(hObject, ~)
        % Sets Adept object's name to new user entered string
        %devObj.input_file = hObject.String;
        %disp(['Device Name: ' devObj.input_file]);
    %end

    function UpdateTemp(hObject, ~)
        % Sets device operating temperature to user entered value
        num = str2double(hTempField.String);
        if ~isnan(num)
            devObj.device(1).ip(1).set = num;
            
            if (hTempUnitDropdown.Value == 2)
                devObj.device(1).ip(1).name = 'T_C';
            elseif (hTempUnitDropdown.Value == 1)
                devObj.device(1).ip(1).name = 'T_K';
            end
                
        else
            errordlg('Temperature must be a number!','Invalid Entry')
            hObject.String = '';
        end
    end

    % Create Utility functions --------------------------------------------
    function val = getSetStrVal(obj, array)
        if ~isfield(obj, 'set')
            if contains(obj.default{1}, '_')
                newID = strrep(obj.default{1}, '_', ' ');
                obj.set = newID;
            else
                obj.set = obj.default{1};
            end
        end
        
        for i = 1:size(array, 2)
            if strcmp(obj.set, array{i})
                val = i;
                break;
            end
        end
    end

    function val = getNameVal(obj)
        if ~isfield(obj, 'name')
            obj.name = obj.aliases{1};
        end
        
        for i = 1:size(obj.aliases, 2)
            if strcmp(obj.name, obj.aliases{i})
                val = i;
                break;
            end
        end
    end

    function str = getSetNumVal(obj)
        if ~isfield(obj, 'set')
            obj.set = obj.default(1);
        end
        
        str = num2str(obj.set);
        
    end
end

        